{"version":3,"file":"rx.min.js","sources":["node_modules/describe-type/source/is/regexp.js","rx.next.js"],"sourcesContent":["/**\n *\n * @function\n * @memberof is\n * @param {any} value\n * @returns {Boolean}\n */\nexport default function regexp(value) {\n\tif (value == null) return false;\n\treturn value.constructor === RegExp;\n}\n","import string from 'describe-type/source/is/string';\nimport regexp from 'describe-type/source/is/regexp';\n\nconst RE_IDENTIFIER = /([a-zA-Z_$][0-9a-zA-Z_$]{0,50})/;\nconst RE_IDENTIFIER_REPLACE = new RegExp(`\\\\$\\\\+{${RE_IDENTIFIER.source}}`, 'g');\nconst RE_IDENTIFIER_BACKREFERENCE = new RegExp(`^[:?]&${RE_IDENTIFIER.source}`);\nconst RE_GROUP = new RegExp(`^[?:]<${RE_IDENTIFIER.source}>([^]*)`);\nconst RE_GROUP_B = /^\\?[:!=]/;\nconst RE_GROUPS = /([\\\\]?[()])/g;\nconst RE_EMPTY_GROUPS = /\\(\\)/g;\nconst { keys } = Object;\n\nfunction toObject(value) {\n\tconst object = { source: '', flags: '', groups: [] };\n\tif (regexp(value)) {\n\t\tobject.groups = value.source.split(RE_GROUPS);\n\t\tobject.source = value.source;\n\t\tobject.flags = value.flags;\n\t}\n\treturn object;\n}\n\nfunction attachGroup(object, chunk, index, groups) {\n}\n\nfunction detachGroup(object, chunk, index, groups) {\n}\n\nfunction createGroup(object, chunk, index, groups) {\n}\n\nfunction reduceGroups(object, chunk, index, groups) {\n\tswitch(chunk) {\n\t\tcase '(': attachGroup(object, chunk, index, groups);\n\t\tcase ')': detachGroup(object, chunk, index, groups);\n\t\tdefault: RE_GROUP_B.lastIndex = 0;\n\t\tif (groups[index - 1] === '(' && RE_GROUP_B.test(chunk) === false) {\n\t\t\tcreateGroup(object, chunk, index, groups);\n\t\t}\n\t}\n\treturn object.source;\n}\n\nfunction getGroupExtension(source, flags) {\n\tconst object = toObject(source, flags);\n\tobject.source = object.groups.reduce(reduceGroups, object);\n\treturn object;\n}\n\nexport default class Rx extends RegExp {\n\tconstructor(source, flags) {\n\t\tconst object = getGroupExtension(source, flags);\n\t\tsuper(object.source, object.flags);\n\t\tthis.groups = object.groups;\n\t}\n\n\texec(value) {\n\t\tconst object = super.exec(value);\n\t\tif (object) {\n\t\t\tobject.groups = {};\n\t\t\tkeys(this.groups).forEach((name) => {\n\t\t\t\tobject.groups[name] = object[this.groups[name]];\n\t\t\t}, this);\n\t\t}\n\t\treturn object;\n\t}\n\n\t[Symbol.replace](pattern, replacement) {\n\t\tconst ctx = this;\n\t\tif (string(replacement)) {\n\t\t\treplacement = replacement.replace(RE_IDENTIFIER_REPLACE, (m, name) => (\n\t\t\t\t`$${ctx.groups[name] || ''}`\n\t\t\t));\n\t\t}\n\t\treturn pattern.replace(ctx, replacement);\n\t}\n\n\t[Symbol.match](value) {\n\t\treturn this.exec(value);\n\t}\n}\n"],"names":["regexp","getGroupExtension"],"mappings":";;;;;;;;;;;;;;;;oWAOe,CAAA,mDCOVA,CAAAA,4NA6BL,CAAA,gEAQiBC,CAAAA"}